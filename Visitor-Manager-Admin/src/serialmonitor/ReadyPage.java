/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package serialmonitor;
import Bfish.Blowfish;
import tools.Vardump;
import com.fazecast.jSerialComm.*;
import java.util.ArrayList;
import java.util.Scanner;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

/**
 *
 * @author Anggun Dwiguna
 */
public class ReadyPage extends javax.swing.JFrame {

    /**
     * Creates new form ReadyPage
     */
    SerialPort[] PortList = null;
    ArrayList<Vardump> comm = new ArrayList();
    int i = 0;
    String datain;
    
    public ReadyPage() {
        initComponents();
        initPortList();
        for(Vardump p: comm){
            System.out.println(p.getId() + " " + p.getData());
        }
    }
    
    public void initPortList(){
        PortList = SerialPort.getCommPorts();
        
        DefaultListModel dlml = new DefaultListModel();
        if(!comm.isEmpty()){
            comm.clear();
        }
        i = 0;
        for(SerialPort a: PortList){
            if(a.getDescriptivePortName().contains("Arduino")){
                dlml.addElement(a.getDescriptivePortName());
                Vardump c = new Vardump();
                c.setData(Integer.toString(i), a.getSystemPortName());
                comm.add(c);                
            }
            i++;
        }
        portList.setModel(dlml);
    }
    
    public void connectAll(){
        i=0;
        for(Vardump a: comm){
            if(PortList[Integer.parseInt(a.getId())].openPort()){
                initListener(PortList[Integer.parseInt(a.getId())]);
                System.out.println("Berhasil terhubung ke port: " + a.getId() + " " + PortList[Integer.parseInt(a.getId())].getDescriptivePortName());
            }
            else{
                System.out.println("Gagal terhubung port: " + PortList[Integer.parseInt(a.getId())].getDescriptivePortName());
            }
            i++;
        }
    }
    
    public void disconnectAll(){
        i=0;
        for(Vardump a: comm){
            if(PortList[Integer.parseInt(a.getId())].closePort()){
                PortList[Integer.parseInt(a.getId())].removeDataListener();
                System.out.println("Berhasil menutup port: " + PortList[Integer.parseInt(a.getId())].getDescriptivePortName());
            }
            else{
                System.out.println("Gagal menutup port: " + PortList[Integer.parseInt(a.getId())].getDescriptivePortName());
            }
            i++;
        }
    }
    
    String readData = "";
    public void initListener(SerialPort comPort){
        
        comPort.addDataListener(new SerialPortDataListener() {
           @Override
           public int getListeningEvents() { return SerialPort.LISTENING_EVENT_DATA_AVAILABLE; }
           @Override
           public void serialEvent(SerialPortEvent event)
           {
                if (event.getEventType() != SerialPort.LISTENING_EVENT_DATA_AVAILABLE)
                   return;

                comPort.setComPortTimeouts(SerialPort.TIMEOUT_READ_BLOCKING, 150, 150);                                
                readData = "";

                Scanner data = new Scanner(comPort.getInputStream());
                while(data.hasNext()){
                        readData += data.next();
                    }
                if(readData.length() == 0){
                    return;                    
                }

                //memisahkan NUID dan ciphertext
                String[] parts = readData.split("-");
                String NUID = parts[0];
                String ruanganID = parts[1];
                String cipher = parts[2];                                 

                System.out.println("Data cipher = " + cipher + " Key = " + NUID);                
                
                //melakukan dekripsi terhadap cipher
                readData = new Blowfish(cipher, NUID).getDecrypt();
                String roleID = readData.split("-")[0];
                String identitas = readData.split("-")[1];
                
                if(new SerialDataCheck(NUID, ruanganID, roleID).authorize()){
                    System.out.println("Authorisasi diterima");
                }
                else{
                    System.out.println("Authorisasi ditolak");
                    JOptionPane.showMessageDialog(null, "Terjadi pelanggaran tag", "Autorisasi ditolak", JOptionPane.ERROR_MESSAGE);
                }
                readData = "";
           }
        });
    }    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        portList = new javax.swing.JList<>();
        scanButton = new javax.swing.JButton();
        connectButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setLocation(new java.awt.Point(1040, 200));
        setPreferredSize(new java.awt.Dimension(300, 300));

        jScrollPane1.setViewportView(portList);

        scanButton.setText("Scan Port");
        scanButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scanButtonActionPerformed(evt);
            }
        });

        connectButton.setText("Connect All");
        connectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(scanButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(connectButton)))
                .addContainerGap(56, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(scanButton)
                    .addComponent(connectButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(45, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void scanButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scanButtonActionPerformed
        // TODO add your handling code here:
        initPortList();
    }//GEN-LAST:event_scanButtonActionPerformed

    private void connectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectButtonActionPerformed
        // TODO add your handling code here:
        if(this.connectButton.getText() == "Connect All"){
            connectAll();
            this.connectButton.setText("Disconnect");
            this.scanButton.setEnabled(false);
        }
        else{
            disconnectAll();
            this.connectButton.setText("Connect All");
            this.scanButton.setEnabled(true);
        }        
    }//GEN-LAST:event_connectButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ReadyPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ReadyPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ReadyPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ReadyPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ReadyPage().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton connectButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList<String> portList;
    private javax.swing.JButton scanButton;
    // End of variables declaration//GEN-END:variables
}
